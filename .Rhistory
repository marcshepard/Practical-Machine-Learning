names (training)
predict (m$finalMod, data.frame (TotalIntench2 = 23,000, FiberWidthCh1 = 10, PerimStatusCh1=2))
?data.frame
d <- data.frame (TotalIntench2 = 23,000, FiberWidthCh1 = 10, PerimStatusCh1=2)
predict (m, d)
d <- data.frame (row.names=names(training))
dim (d)
d <- data.frame (repeat (0, 119), row.names=names(training))
d <- data.frame (0), row.names=names(training))
d <- data.frame (repeat (0, 119))
?seq
?repeat
?zeros
z <- c(0)
for (i = 0; i < 119; i=i+1) z <- c (z, 0)
i=0
while (i < 119) {}
while (i < 119) {i = i + 1; z <- c (z, 0)}
dim(z)
length (z)
z <- 0
i = 1
while (i < 119) {i = i + 1; z <- c (z, 0)}
length (z)
d <- data.frame (z)
dim (d)
?data.frame
?matrix
d <- data.frame (matrix (nrows=1, ncols=119))
?c
?seq
?repeat
?matrix
matrix (data=0, nrow=1, ncol=119)
m <- matrix (data=0, nrow=1, ncol=119)
d <- data.frame (m)
dim (d)
colnames(d) <- names(training)
d
d[1,TotalIntench2] = 23,000
d[1,"TotalIntench2"] = 23,000
d$TotalIntench2[1] = 23,000
d$TotalIntench2
d[1]
d
colnames(d)
class (d)
class (d[1])
class (d[[1]])
d[1]
d[[1]]
training[1]
training[1][0]
head (training, 1)
head (d, 1)
d [1, "widthCh1"]
training [1, "widthCh1"]
mtcars [1, "mpg"]
training [1, "XCentroid""]
training [1, "XCentroid"]
d [1, "XCentroid"]
d [1, "TotalIntench2"]
colnames (training)
d [1, "FiberWidthCh1"]
d [1, "TotalIntench2"]
d [1, "TotalIntenCh2"]
d [1, "TotalIntenCh2"] = 23000
d [1, "FiberWidthCh1"] = 10
d [1, "PerimStatusCh1"] = 2
predicts (m$finalModel, data=d)
predict (m$finalModel, data=d)
m
set.seed (125)
m <- train (Case~., method="rpart", data=training)
predict (m$finalModel, newdata=d)
predict (m, newdata=d)
d <- head (training, 1)
class (d)
d [1]
d [1, "PerimStatusCh1"] = 2
d [1, "FiberWidthCh1"] = 10.0
d [1, "PerimStatusCh1"] = 2.0
d [1, "TotalIntenCh2"] = 23000.0
predict (m, newdata=d)
predict (m$finalMod, newdata=d)
predict (m, newdata=testing)
predict (m, newdata=d)
fancyRpartPlot(m$finalModel)
summary (training$Case)
summary (segmentationOriginal$Case)
class (segmentationOriginal$Case)
head (segmentationOriginal)
View(inTrain)
inTrain
?match
inTrain <- match ("Train", segmentationOriginal$Case)
inTrain
inTrain <- match ("Train", segmentationOriginal$Case, nomatch=0)
inTrain
inTrain[1]
inTrain[[1]]
inTrain <- segmentationOriginal$Case %in% "Train"
inTrain
segmentationOriginal$Case
inTrain <- NULL
inTrain <- c(inTrain, 2)
inTrain <- NULL
i <- 1
while (i <= length(segmentationOriginal)) {i <- i + 1; if (segmentationOriginal$Case=='Traing') {inTrain <- c(inTrain, i)}}
inTrain
i
length(segmentationOriginal)
dim (segmentationOriginal)
while (i <= dim(segmentationOriginal)[1]) {i <- i + 1; if (segmentationOriginal$Case=='Traing') {inTrain <- c(inTrain, i)}}
inTrain
i
i = 1
while (i <= dim(segmentationOriginal)[1]) {i <- i + 1; if (segmentationOriginal[i,"Case"]=='Traing') {inTrain <- c(inTrain, i)}}
segmentationOriginal[20"Case"]
segmentationOriginal[20, "Case"]
i
segmentationOriginal[2020, "Case"]
segmentationOriginal[2019, "Case"]
i <- 0; while (i <= dim(segmentationOriginal)[1]) {i <- i + 1; if (segmentationOriginal[i,"Case"]=='Traing') {inTrain <- c(inTrain, i)}}
segmentationOriginal[20, "Case"]
segmentationOriginal[20, "Case"] == 'Test'
i <- 0; while (i <= dim(segmentationOriginal)[1]) {i <- i + 1; if (segmentationOriginal[i,"Case"]=="Train") {inTrain <- c(inTrain, i)}}
inTrain
inTrain <- NULL; i <- 0; while (i <= dim(segmentationOriginal)[1]) {i <- i + 1; if (segmentationOriginal[i,"Case"]=="Train") {inTrain <- c(inTrain, i)}}
inTrain
length (inTrain)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
length (training)
length (testing)
length (inTrain)
dim (training)
dim (testing)
head (training, 1)
m <- train (Class~., method="rpart", data=training)
set.seed (125)
m <- train (Class~., method="rpart", data=training)
m$finalModel
fancyRpartPlot (m$finalModel)
45e+3
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
inTrain <- NULL; i <- 0; while (i < dim(segmentationOriginal)[1]) {i <- i + 1; if (segmentationOriginal[i,"Case"]=="Train") {inTrain <- c(inTrain, i)}}
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
set.seed (125)
m <- train (Class~., method="rpart", data=training)
library(rattle)
fancyRpartPlot (m$finalModel)
library(pgmm)
data(olive)
olive = olive[,-1]
head (olive,1)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed (13234)
#m <- train (chd~, method="glm", data=trainSA)
?SAheart
m <- train (chd~age+alcohol+obesity+tobacco+typea+ldl, method="glm", data=trainSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
m$finalModel
misClass (trainSA$chd, predict(m, trainSA))
missClass (trainSA$chd, predict(m, trainSA))
missClass (testSA$chd, predict(m, testSA))
head (vowel.train, 1)
vowel.train$y <- as.factor (vowel.train$y)
vowel.test$y <- as.factor (vowel.test$y)
set.seed (33833)
m <- train (y~x, method="rf", data=vowel.train, prox=TRUE)
set.seed (33833)
m <- train (y~., method="rf", data=vowel.train, prox=TRUE)
install.packages("randomForest")
library (randomForest)
set.seed (33833)
m <- train (y~., method="rf", data=vowel.train, prox=TRUE)
?varImp
varImp (m)
?train
?train
library (caret)
?train
ds <- read.csv ("GitHub/Practical-Machine-Learning/pml-training.csv")
library (randomForest)
m <- train (classe~., data=ds, method="glm")
library (glm)
dim (ds)
m <- train (classe~., data=ds, method="rpart")
library (caret)
library (randomForest)
library (rpart)
ds <- read.csv ("GitHub/Practical-Machine-Learning/pml-training.csv")
install.packages("doParallel")
library (doParallel)
registerDoParallel(cores=2)
ds <- read.csv ("GitHub/Practical-Machine-Learning/pml-training.csv")
?sample
dss <- ds[1:dim(ds)[1]/10,]
mRf <-train(classe~., data=dss, method="rf", prox=TRUE)
?read.csv
ds3 <- complete.cases (ds2)
ds3 <- ds2[complete.cases (ds2),]
dssc <- ds2[complete.cases (dss),]
dssc <- dss[complete.cases (dss),]
dim (dssc)
dim (dss)
ds2 <- ds[complete.cases (ds),]
dim (ds2)
dim (ds)
summary (ds)
dsc <- ds[complete.cases (ds),]
mRf <-train(classe~., data=dsc, method="rf", prox=TRUE)
library (doParallel)
library (caret)
library (randomForest)
library (rpart)
library (gbm)
registerDoParallel(cores=2)
setwd ("GitHub/Practical-Machine-Learning")
train <- read.csv("pml-training.csv", na.strings = c("NA", "", "#DIV/0!"))
train <- train[, colSums(is.na(train)) < .5 * nrow(train)]
inTrain2 <- createDataPartition (y=train$classe, p=.1, list=FALSE)
train2<-train[inTrain2,]
test2<-train[-inTrain2,]
mTree <-train(classe~., data=train2, method="rpart")
confusionMatrix(predict(mTree,test2), test2$classe)
test <- read.csv("pml-testing.csv", na.strings = c("NA", "", "#DIV/0!"))
dim(test)
predict(mTree, newdata=test)
mRf <-train(classe~., data=train2, method="rf", prox=TRUE)
confusionMatrix(predict(mRf,test2), test2$classe)
predict(mTree,test)
predict(mRf,test)
mGbm <-train(classe~., data=train2, method="gbm", verbose=FALSE)
confusionMatrix(predict(mGbm,test2), test2$classe)
dim(test2)
test <- read.csv("pml-testing.csv", na.strings = c("NA", "", "#DIV/0!"))
t <- read.csv("pml-training.csv", na.strings = c("NA", "", "#DIV/0!"))
goodCols <- colSums(is.na(train)) < .5 * nrow(train)
test <- test[,goodCols]
dim(test)
test <- read.csv("pml-testing.csv", na.strings = c("NA", "", "#DIV/0!"))
t <- read.csv("pml-training.csv", na.strings = c("NA", "", "#DIV/0!"))
goodCols <- colSums(is.na(t)) < .5 * nrow(t)
test <- test[,goodCols]
dim (test)
dim (train2)
predict(mTree,test)
predict(mRf,test)
predict(mGbm,test)
train <- read.csv("pml-training.csv", na.strings = c("NA", "", "#DIV/0!"))
goodCols <- <- c("pitch_belt", "yaw_belt", "total_accel_belt", "gyros_belt_x",
"gyros_belt_y", "gyros_belt_z", "accel_belt_x", "accel_belt_y", "accel_belt_z",
"magnet_belt_x", "magnet_belt_y", "magnet_belt_z", "roll_arm", "pitch_arm",
"yaw_arm", "total_accel_arm", "gyros_arm_x", "gyros_arm_y", "gyros_arm_z",
"accel_arm_x", "accel_arm_y", "accel_arm_z", "magnet_arm_x", "magnet_arm_y",
"magnet_arm_z", "roll_dumbbell", "pitch_dumbbell", "yaw_dumbbell", "total_accel_dumbbell",
"gyros_dumbbell_x", "gyros_dumbbell_y", "gyros_dumbbell_z", "accel_dumbbell_x",
"accel_dumbbell_y", "accel_dumbbell_z", "magnet_dumbbell_x", "magnet_dumbbell_y",
"magnet_dumbbell_z", "roll_forearm", "pitch_forearm", "yaw_forearm", "total_accel_forearm",
"gyros_forearm_x", "gyros_forearm_y", "gyros_forearm_z", "accel_forearm_x",
"accel_forearm_y", "accel_forearm_z", "magnet_forearm_x", "magnet_forearm_y",
"magnet_forearm_z")
goodCols <-
<- c("pitch_belt", "yaw_belt", "total_accel_belt", "gyros_belt_x",
"gyros_belt_y", "gyros_belt_z", "accel_belt_x", "accel_belt_y", "accel_belt_z",
"magnet_belt_x", "magnet_belt_y", "magnet_belt_z", "roll_arm", "pitch_arm",
"yaw_arm", "total_accel_arm", "gyros_arm_x", "gyros_arm_y", "gyros_arm_z",
"accel_arm_x", "accel_arm_y", "accel_arm_z", "magnet_arm_x", "magnet_arm_y",
"magnet_arm_z", "roll_dumbbell", "pitch_dumbbell", "yaw_dumbbell", "total_accel_dumbbell",
"gyros_dumbbell_x", "gyros_dumbbell_y", "gyros_dumbbell_z", "accel_dumbbell_x",
"accel_dumbbell_y", "accel_dumbbell_z", "magnet_dumbbell_x", "magnet_dumbbell_y",
"magnet_dumbbell_z", "roll_forearm", "pitch_forearm", "yaw_forearm", "total_accel_forearm",
"gyros_forearm_x", "gyros_forearm_y", "gyros_forearm_z", "accel_forearm_x",
"accel_forearm_y", "accel_forearm_z", "magnet_forearm_x", "magnet_forearm_y",
"magnet_forearm_z")
goodCols
<- c("pitch_belt", "yaw_belt", "total_accel_belt", "gyros_belt_x",
"gyros_belt_y", "gyros_belt_z", "accel_belt_x", "accel_belt_y", "accel_belt_z",
"magnet_belt_x", "magnet_belt_y", "magnet_belt_z", "roll_arm", "pitch_arm",
"yaw_arm", "total_accel_arm", "gyros_arm_x", "gyros_arm_y", "gyros_arm_z",
"accel_arm_x", "accel_arm_y", "accel_arm_z", "magnet_arm_x", "magnet_arm_y",
"magnet_arm_z", "roll_dumbbell", "pitch_dumbbell", "yaw_dumbbell", "total_accel_dumbbell",
"gyros_dumbbell_x", "gyros_dumbbell_y", "gyros_dumbbell_z", "accel_dumbbell_x",
"accel_dumbbell_y", "accel_dumbbell_z", "magnet_dumbbell_x", "magnet_dumbbell_y",
"magnet_dumbbell_z", "roll_forearm", "pitch_forearm", "yaw_forearm", "total_accel_forearm",
"gyros_forearm_x", "gyros_forearm_y", "gyros_forearm_z", "accel_forearm_x",
"accel_forearm_y", "accel_forearm_z", "magnet_forearm_x", "magnet_forearm_y",
"magnet_forearm_z")
goodCols <- c("pitch_belt", "yaw_belt", "total_accel_belt", "gyros_belt_x",
"gyros_belt_y", "gyros_belt_z", "accel_belt_x", "accel_belt_y", "accel_belt_z",
"magnet_belt_x", "magnet_belt_y", "magnet_belt_z", "roll_arm", "pitch_arm",
"yaw_arm", "total_accel_arm", "gyros_arm_x", "gyros_arm_y", "gyros_arm_z",
"accel_arm_x", "accel_arm_y", "accel_arm_z", "magnet_arm_x", "magnet_arm_y",
"magnet_arm_z", "roll_dumbbell", "pitch_dumbbell", "yaw_dumbbell", "total_accel_dumbbell",
"gyros_dumbbell_x", "gyros_dumbbell_y", "gyros_dumbbell_z", "accel_dumbbell_x",
"accel_dumbbell_y", "accel_dumbbell_z", "magnet_dumbbell_x", "magnet_dumbbell_y",
"magnet_dumbbell_z", "roll_forearm", "pitch_forearm", "yaw_forearm", "total_accel_forearm",
"gyros_forearm_x", "gyros_forearm_y", "gyros_forearm_z", "accel_forearm_x",
"accel_forearm_y", "accel_forearm_z", "magnet_forearm_x", "magnet_forearm_y",
"magnet_forearm_z")
train <- train[,goodCols]
inTrain2 <- createDataPartition (y=train$classe, p=.1, list=FALSE)
train2<-train[inTrain2,]
test2<-train[-inTrain2,]
dim (train)
summary (train$classe)
summary (train)
train <- read.csv("pml-training.csv", na.strings = c("NA", "", "#DIV/0!"))
goodCols <- c("pitch_belt", "yaw_belt", "total_accel_belt", "gyros_belt_x",
"gyros_belt_y", "gyros_belt_z", "accel_belt_x", "accel_belt_y", "accel_belt_z",
"magnet_belt_x", "magnet_belt_y", "magnet_belt_z", "roll_arm", "pitch_arm",
"yaw_arm", "total_accel_arm", "gyros_arm_x", "gyros_arm_y", "gyros_arm_z",
"accel_arm_x", "accel_arm_y", "accel_arm_z", "magnet_arm_x", "magnet_arm_y",
"magnet_arm_z", "roll_dumbbell", "pitch_dumbbell", "yaw_dumbbell", "total_accel_dumbbell",
"gyros_dumbbell_x", "gyros_dumbbell_y", "gyros_dumbbell_z", "accel_dumbbell_x",
"accel_dumbbell_y", "accel_dumbbell_z", "magnet_dumbbell_x", "magnet_dumbbell_y",
"magnet_dumbbell_z", "roll_forearm", "pitch_forearm", "yaw_forearm", "total_accel_forearm",
"gyros_forearm_x", "gyros_forearm_y", "gyros_forearm_z", "accel_forearm_x",
"accel_forearm_y", "accel_forearm_z", "magnet_forearm_x", "magnet_forearm_y",
"magnet_forearm_z", "classe")
train <- train[,goodCols]
inTrain2 <- createDataPartition (y=train$classe, p=.1, list=FALSE)
train2<-train[inTrain2,]
test2<-train[-inTrain2,]
mGbm <-train(classe~., data=train2, method="gbm", verbose=FALSE)
mGbm
confusionMatrix(predict(mGbm,test2), test2$classe)
predict(mGbm,test)
train <- read.csv("pml-training.csv", na.strings = c("NA", "", "#DIV/0!"))
names (train)
summary(train)
summary (train[,1])
train[,1]
names(train)
t <- train[,-"user_name"]
t <- train[,-which(colnames(df)=="user_name")]
t <- t[, colSums(is.na(t)) < .5 * nrow(t)]
train <- t
inTrain2 <- createDataPartition (y=train$classe, p=.05, list=FALSE)
train2<-train[inTrain2,]
test2<-train[-inTrain2,]
dim (train2)
train <- read.csv("pml-training.csv", na.strings = c("NA", "", "#DIV/0!"))
train <- train[, colSums(is.na(train)) < .5 * nrow(train)]
train <- train[,-which(colnames(train)=="user_name"]
inTrain2 <- createDataPartition (y=train$classe, p=.05, list=FALSE)
train2<-train[inTrain2,]
test2<-train[-inTrain2,]
dim(train2)
train <- train[,-which(colnames(train)=="user_name")]
inTrain2 <- createDataPartition (y=train$classe, p=.05, list=FALSE)
train2<-train[inTrain2,]
test2<-train[-inTrain2,]
dim(train2)
mGbm <-train(classe~., data=train2, method="gbm", verbose=FALSE)
mGbm
mGbm$results
avg(mGbm$results$Accuracy)
AVG(mGbm$results$Accuracy)
mean (mGbm$results$Accuracy)
mean (mGbm$results$Accuracy) * 100
predict(mGbm,test)
head (train, 1)
train <- train [,-1:4]
train <- train [,-c(1:4)]
head (train,1)
train <- train [,-c(1)]
names (train)
train <- train [,-1]
names (train)
inTrain2 <- createDataPartition (y=train$classe, p=.05, list=FALSE)
train2<-train[inTrain2,]
test2<-train[-inTrain2,]
mGbm <-train(classe~., data=train2, method="gbm", verbose=FALSE)
confusionMatrix(predict(mGbm,test2), test2$classe)
mean (mGbm$results$Accuracy) * 100 # Accuracy: .9979
predict(mGbm,test)
train <- read.csv("pml-training.csv", na.strings = c("NA", "", "#DIV/0!"))
train <- train[, colSums(is.na(train)) < .5 * nrow(train)]
head (train)
names (train)
summary (train$new_window)
train <- train[,-c(3:5)]
inTrain2 <- createDataPartition (y=train$classe, p=.05, list=FALSE)
train2<-train[inTrain2,]
test2<-train[-inTrain2,]
mGbm <-train(classe~., data=train2, method="gbm", verbose=FALSE)
confusionMatrix(predict(mGbm,test2), test2$classe)
mean (mGbm$results$Accuracy) * 100 # Accuracy: .9979
predict(mGbm,test)
names (train)
train <- read.csv("pml-training.csv", na.strings = c("NA", "", "#DIV/0!"))
train <- train[, colSums(is.na(train)) < .5 * nrow(train)]
train <- train[,-1] # Remove X column
inTrain2 <- createDataPartition (y=train$classe, p=.05, list=FALSE)
train2<-train[inTrain2,]
test2<-train[-inTrain2,]
mGbm <-train(classe~., data=train2, method="gbm", verbose=FALSE)
confusionMatrix(predict(mGbm,test2), test2$classe)
mean (mGbm$results$Accuracy) * 100 # Accuracy: .9979
predict(mGbm,test)
name (cols)
name (train)
name (train2)
names (train2)
train <- read.csv("pml-training.csv", na.strings = c("NA", "", "#DIV/0!"))
train <- train[, colSums(is.na(train)) < .5 * nrow(train)]
train <- train[,-1]
# Remove "X" column - if I don't do this then it works great for predicting the cross-validation set,
# But predicts all "A's" on the test set
inTrain2 <- createDataPartition (y=train$classe, p=.05, list=FALSE)
train2<-train[inTrain2,]
test2<-train[-inTrain2,]
mRf <-train(classe~., data=train2, method="rf", prox=TRUE)
mRf
mRf$results
mean(mRf$results$Accuracy)
confusionMatrix(predict(mRf,test2), test2$classe)
confusionMatrix(predict(mRf,test2), test2$classe)$statistics
confusionMatrix(predict(mRf,test2), test2$classe)$Statistics
confusionMatrix(predict(mRf,test2), test2$classe)$Overall
predict(mRf,test)
mGbm <-train(classe~., data=train2, method="gbm", verbose=FALSE)
mean (mGbm$results$Accuracy) * 100 # Accuracy: .9979
confusionMatrix(predict(mGbm,test2), test2$classe)
mTree <-train(classe~., data=train2, method="rpart")
confusionMatrix(predict(mTree,test2), test2$classe)
predict(mTree,test)
predict(mRf,test)
predict(mGbm,test)
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files (predict(mGbm,test))
# Training goes much faster if you use two cores
registerDoParallel(cores=2)
# Read in training dataset, making sure to parse missing values correctly
df <- read.csv("pml-training.csv", na.strings = c("NA", "", "#DIV/0!"))
# Remove columns that are mostly NA's (there are a lot of them - 100 out of 160)
df <- df[, colSums(is.na(df)) < .5 * nrow(df)]
# Also remove the first column ("X" - which is just a row counter), since if I leave X in then
# my model and cross-validation stats look great, but it predicts all A's on the test set
df <- df[,-1]
# Create test and cross-validation partitions, a small training partition generates
# an accurate model in a reasonable amount of time
inTrain <- createDataPartition (y=df$classe, p=.05, list=FALSE)
train<-df[inTrain,]
validation<-df[-inTrain,]
confusionMatrix(predict(mTree,validation), validation$classe)
confusionMatrix(predict(mTree,validation), validation$classe)$statistics
confusionMatrix(predict(mTree,validation), validation$classe)$accuracy
cm <- confusionMatrix(predict(mTree,validation), validation$classe)
confusionMatrix(predict(mTree,validation), validation$classe)$accuracy
confusionMatrix(predict(mTree,validation), validation$classe)
confusionMatrix(predict(mTree,validation), validation$classe)$reference
confusionMatrix(predict(mTree,validation), validation$classe)$predictions
confusionMatrix(predict(mTree,validation), validation$classe)$prediction
cm$?
cm
summary(cm)
cm$table
cm$overall
cm$overall$Accuracy
cm$overall$accuracy
summary (cm$overall)
(cm$overall)$accuracy
(cm$overall)
class (cm$overall)
cm$overall[1]
cm$overall["Accuracy"]
confusionMatrix(predict(mRf,validation), validation$classe)$overall["Accuracy"]
mRf
mean(mRf$results$Accuracy)
confusionMatrix(predict(mRf,validation), validation$classe)
confusionMatrix(predict(mRf,validation), validation$classe)$reference
summary (confusionMatrix(predict(mRf,validation), validation$classe))
confusionMatrix(predict(mRf,validation), validation$classe)$table
mGbm
mTree
mGbm
summary (mGbm)
mGmb$finalModel
mGbm$finalModel
mGbm$accuracy
mGbm$OOB
mGbm$OOBE
mGbm$table
mGbm
summary (mGbm)
summary (mGbm$Accuracy)
mGbm$Accuracy
mGbm$table
mGbm
mGbm$results
mean (mGbm$results$Accuracy)
mTree
mTree$results
mean (mTree$results$Accuracy)
