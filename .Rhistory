?hist
pot (training$SuperPlasticizer)
plot (training$SuperPlasticizer)
plot (training$SuperPlasticizer, xlim=100)
hist (training$SuperPlasticizer, xlim=100)
min (training$SuperPlasticizer)
max (training$SuperPlasticizer)
training$SuperPlasticizer
training[1]
training[2]
head (training)
head (training[5])
hist (training[5])
min (training[5])
max (training[5])
hist (training[5], breaks=c(0,.005, .010, .015))
class(training[5][1])
class(training[5])
training$SuperPlasticizer[1]
(training$SuperPlasticizer)[[1]]
ibrary(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
summary (training)
summary(training$SuperPlasticizer)
summary (training)
mean(training$SuperPlasticizer)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
mean(training$SuperPlasticizer)
mean(predictors$SuperPlasticizer)
predictors$SuperPlasticizer
summary (predictors)
class (predictors)
names (predictors)
predictors[[SuperPlasticizer]]
predictors[,SuperPlasticizer]
predictors
predictors[1,SuperPlasticizer]
predictors["SuperPlasticizer"]
summary (predictors)
d <- c(1,2,3,4)
e <- c("red", "white", "red", NA)
f <- c(TRUE,TRUE,TRUE,FALSE)
mydata <- data.frame(d,e,f)
names(mydata) <- c("ID","Color","Passed") # variable names
summary(mydata)
mydata$ID
names (mydata)
names (predictors)
concrete["SuperPlasticizer"]
summary (concete)
summary (concrete)
summary (concrete$Superplasticizer)
class (concrete$Superplasticizer[1])
hist (concrete$Superplasticizer)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
names (training)
cols = grep ("^IL$", colnames (training))
cols
cols = grep ("^IL$", names (training))
cols
names (training)
colnames (training)
?grep
cols = grep ("^IL", names (training))
cols
cols = grep ("^IL.*", names (training))
cols
t2 <- training[,cols]
p <- prcomp (t2)
p
head (p)
dim(p)
summmary(p)
summary(p)
cols
length (cols
)
?preProcess
preproc <- preProcess (training, method="pca", thresh=.8)
preproc <- preProcess (p, method="pca", thresh=.8)
preproc <- preProcess (p, method="pca", thresh=.8)
dim (p)
p
dim(p)
length (p)
cols
preproc <- preProcess (t, method="pca", thresh=.8)
summary(t)
t
t <- training[,cols]
summary(t)
preproc <- preProcess (t, method="pca", thresh=.8)
summary (preproc)
preproc <- preProcess (tlibrary(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,], method="pca", thresh=.8)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
preproc <- preProcess (training[,cols], method="pca", thresh=.8)
preproc
?data
head (spam, 1)
data (spam)
library (caret)
head (spam, 1)
data (spam)
library (kernlib)
library (kernlab)
head (spam, 1)
data (spam)
head (spam, 1)
data()
f = createFolds (spam$type, k=10, list=TRUE, returnTrain=TRUE)
class (f)
f
dim(f)
lenght (f)
length(f)
f[1]
f[2]
names (f)
class (f[1])
class (f)
f2 = createFolds (spam$type, k=10, list=FALSE, returnTrain=TRUE)
class (f2)
names (f2)
f2
claa (f2)
class (f2)
dim(spam)
p <- createDataPartition (y=spam$type, p=.7, list=TRUE)
names(p)
p[1]
dim(p)
length (p)
class (p)
class (p[1])
class (p[1][1])
names (p[1])
names (p[1][1])
names (p[2])
names (p[1][1])
names (p[1][2])
length (p[1][1])
class (p[1][1])
class (p[1][1][1])
class (p[[1]])
length (p[[1]])
summary (spam)
dim(spam)
?preProcess
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
trainingIx <- createDataPartition (y=segmentationOriginal$Case, p=.7, list=FALSE)
training <- segmentationOriginal[,trainingIx]
training <- segmentationOriginal[trainingIx,]
testing <- segmentationOriginal[-trainingIx,]
dim(training)
dim (testing)
m <- train (Case~., method="rpart", data=training)
set.Seed (125)
set.seed (125)
m <- train (Case~., method="rpart", data=training)
m$finalModel
library (rattle)
install.packages("rattle")
library (rattle)
fancyRPartplot (m$finalModel)
fancyRpartPlot (m$finalModel)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
inTrain <- createDataPartition (y=segmentationOriginal$Case, p=.7, list=FALSE)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
m <- train (Case~., method="rpart", data=training)
set.seed(125)
m <- train (Case~., method="rpart", data=training)
library(rattle)
m$finalModel
prettyRpartPlot(m$finalModel)
fancyRpartPlot(m$finalModel)
install.packages("rpart.plot")
fancyRpartPlot(m$finalModel)
head (testing, 1)
names (training)
predict (m$finalMod, data.frame (TotalIntench2 = 23,000, FiberWidthCh1 = 10, PerimStatusCh1=2))
?data.frame
d <- data.frame (TotalIntench2 = 23,000, FiberWidthCh1 = 10, PerimStatusCh1=2)
predict (m, d)
d <- data.frame (row.names=names(training))
dim (d)
d <- data.frame (repeat (0, 119), row.names=names(training))
d <- data.frame (0), row.names=names(training))
d <- data.frame (repeat (0, 119))
?seq
?repeat
?zeros
z <- c(0)
for (i = 0; i < 119; i=i+1) z <- c (z, 0)
i=0
while (i < 119) {}
while (i < 119) {i = i + 1; z <- c (z, 0)}
dim(z)
length (z)
z <- 0
i = 1
while (i < 119) {i = i + 1; z <- c (z, 0)}
length (z)
d <- data.frame (z)
dim (d)
?data.frame
?matrix
d <- data.frame (matrix (nrows=1, ncols=119))
?c
?seq
?repeat
?matrix
matrix (data=0, nrow=1, ncol=119)
m <- matrix (data=0, nrow=1, ncol=119)
d <- data.frame (m)
dim (d)
colnames(d) <- names(training)
d
d[1,TotalIntench2] = 23,000
d[1,"TotalIntench2"] = 23,000
d$TotalIntench2[1] = 23,000
d$TotalIntench2
d[1]
d
colnames(d)
class (d)
class (d[1])
class (d[[1]])
d[1]
d[[1]]
training[1]
training[1][0]
head (training, 1)
head (d, 1)
d [1, "widthCh1"]
training [1, "widthCh1"]
mtcars [1, "mpg"]
training [1, "XCentroid""]
training [1, "XCentroid"]
d [1, "XCentroid"]
d [1, "TotalIntench2"]
colnames (training)
d [1, "FiberWidthCh1"]
d [1, "TotalIntench2"]
d [1, "TotalIntenCh2"]
d [1, "TotalIntenCh2"] = 23000
d [1, "FiberWidthCh1"] = 10
d [1, "PerimStatusCh1"] = 2
predicts (m$finalModel, data=d)
predict (m$finalModel, data=d)
m
set.seed (125)
m <- train (Case~., method="rpart", data=training)
predict (m$finalModel, newdata=d)
predict (m, newdata=d)
d <- head (training, 1)
class (d)
d [1]
d [1, "PerimStatusCh1"] = 2
d [1, "FiberWidthCh1"] = 10.0
d [1, "PerimStatusCh1"] = 2.0
d [1, "TotalIntenCh2"] = 23000.0
predict (m, newdata=d)
predict (m$finalMod, newdata=d)
predict (m, newdata=testing)
predict (m, newdata=d)
fancyRpartPlot(m$finalModel)
summary (training$Case)
summary (segmentationOriginal$Case)
class (segmentationOriginal$Case)
head (segmentationOriginal)
View(inTrain)
inTrain
?match
inTrain <- match ("Train", segmentationOriginal$Case)
inTrain
inTrain <- match ("Train", segmentationOriginal$Case, nomatch=0)
inTrain
inTrain[1]
inTrain[[1]]
inTrain <- segmentationOriginal$Case %in% "Train"
inTrain
segmentationOriginal$Case
inTrain <- NULL
inTrain <- c(inTrain, 2)
inTrain <- NULL
i <- 1
while (i <= length(segmentationOriginal)) {i <- i + 1; if (segmentationOriginal$Case=='Traing') {inTrain <- c(inTrain, i)}}
inTrain
i
length(segmentationOriginal)
dim (segmentationOriginal)
while (i <= dim(segmentationOriginal)[1]) {i <- i + 1; if (segmentationOriginal$Case=='Traing') {inTrain <- c(inTrain, i)}}
inTrain
i
i = 1
while (i <= dim(segmentationOriginal)[1]) {i <- i + 1; if (segmentationOriginal[i,"Case"]=='Traing') {inTrain <- c(inTrain, i)}}
segmentationOriginal[20"Case"]
segmentationOriginal[20, "Case"]
i
segmentationOriginal[2020, "Case"]
segmentationOriginal[2019, "Case"]
i <- 0; while (i <= dim(segmentationOriginal)[1]) {i <- i + 1; if (segmentationOriginal[i,"Case"]=='Traing') {inTrain <- c(inTrain, i)}}
segmentationOriginal[20, "Case"]
segmentationOriginal[20, "Case"] == 'Test'
i <- 0; while (i <= dim(segmentationOriginal)[1]) {i <- i + 1; if (segmentationOriginal[i,"Case"]=="Train") {inTrain <- c(inTrain, i)}}
inTrain
inTrain <- NULL; i <- 0; while (i <= dim(segmentationOriginal)[1]) {i <- i + 1; if (segmentationOriginal[i,"Case"]=="Train") {inTrain <- c(inTrain, i)}}
inTrain
length (inTrain)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
length (training)
length (testing)
length (inTrain)
dim (training)
dim (testing)
head (training, 1)
m <- train (Class~., method="rpart", data=training)
set.seed (125)
m <- train (Class~., method="rpart", data=training)
m$finalModel
fancyRpartPlot (m$finalModel)
45e+3
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
inTrain <- NULL; i <- 0; while (i < dim(segmentationOriginal)[1]) {i <- i + 1; if (segmentationOriginal[i,"Case"]=="Train") {inTrain <- c(inTrain, i)}}
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
set.seed (125)
m <- train (Class~., method="rpart", data=training)
library(rattle)
fancyRpartPlot (m$finalModel)
library(pgmm)
data(olive)
olive = olive[,-1]
head (olive,1)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed (13234)
#m <- train (chd~, method="glm", data=trainSA)
?SAheart
m <- train (chd~age+alcohol+obesity+tobacco+typea+ldl, method="glm", data=trainSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
m$finalModel
misClass (trainSA$chd, predict(m, trainSA))
missClass (trainSA$chd, predict(m, trainSA))
missClass (testSA$chd, predict(m, testSA))
head (vowel.train, 1)
vowel.train$y <- as.factor (vowel.train$y)
vowel.test$y <- as.factor (vowel.test$y)
set.seed (33833)
m <- train (y~x, method="rf", data=vowel.train, prox=TRUE)
set.seed (33833)
m <- train (y~., method="rf", data=vowel.train, prox=TRUE)
install.packages("randomForest")
library (randomForest)
set.seed (33833)
m <- train (y~., method="rf", data=vowel.train, prox=TRUE)
?varImp
varImp (m)
?train
?train
library (caret)
?train
ds <- read.csv ("GitHub/Practical-Machine-Learning/pml-training.csv")
library (randomForest)
m <- train (classe~., data=ds, method="glm")
library (glm)
dim (ds)
m <- train (classe~., data=ds, method="rpart")
library (caret)
library (randomForest)
library (rpart)
ds <- read.csv ("GitHub/Practical-Machine-Learning/pml-training.csv")
install.packages("doParallel")
library (doParallel)
registerDoParallel(cores=2)
ds <- read.csv ("GitHub/Practical-Machine-Learning/pml-training.csv")
?sample
dss <- ds[1:dim(ds)[1]/10,]
mRf <-train(classe~., data=dss, method="rf", prox=TRUE)
?read.csv
ds3 <- complete.cases (ds2)
ds3 <- ds2[complete.cases (ds2),]
dssc <- ds2[complete.cases (dss),]
dssc <- dss[complete.cases (dss),]
dim (dssc)
dim (dss)
ds2 <- ds[complete.cases (ds),]
dim (ds2)
dim (ds)
summary (ds)
dsc <- ds[complete.cases (ds),]
mRf <-train(classe~., data=dsc, method="rf", prox=TRUE)
library(doParallel)
library (caret)
library (randomForest)
library (rpart)
library (gbm)
library (survival)
library (splines)
library (plyr)
registerDoParallel(cores=2)
setwd ("GitHub/Practical-Machine-Learning")
train <- read.csv("pml-training.csv", na.strings = c("NA", ""))
train <- train[, colSums(is.na(train)) < .5 * nrow(train)]
inTrain2 <- createDataPartition (train$classe, p=.05, list=FALSE)
train2<-train[inTrain2,]
test2<-train[-inTrain2,]
dim(train2)
mTree <-train(classe~., data=train2, method="rpart")
confusionMatrix(predict(mTree,test2), test2$classe)
mGbm <-train(classe~., data=train2, method="gbm", verbose=FALSE)
confusionMatrix(predict(mGbm,test2), test2$classe)
confusionMatrix(predict(mTree,test2), test2$classe)
mGlm <-train(classe~., data=train2, method="glm")
confusionMatrix(predict(mGlm,test2), test2$classe)
mRf <-train(classe~., data=train2, method="rf", prox=TRUE)
confusionMatrix(predict(mRf,test2), test2$classe)
library(doParallel)
library (caret)
library (randomForest)
library (rpart)
library (gbm)
registerDoParallel(cores=2)
setwd ("GitHub/Practical-Machine-Learning")
train <- read.csv("pml-training.csv", na.strings = c("NA", "", "#DIV/0!"))
train <- train[, colSums(is.na(train)) < .5 * nrow(train)]
inTrain2 <- createDataPartition (train$classe, p=.05, list=FALSE)
train2<-train[inTrain2,]
test2<-train[-inTrain2,]
dim(test2)
dim(train2)
mGlm
mGmb
mGbm
test <- read.csv("pml-testing.csv", na.strings = c("NA", "", "#DIV/0!"))
p <- predict(mGbm,test)
p
predict(mGbm,test)
predict(mRf,test)
predict(mTree,test)
len(p)
dim(p)
class (p)
length (p)
library (doParallel)
library (caret)
library (randomForest)
library (rpart)
library (gbm)
registerDoParallel(cores=2)
setwd ("GitHub/Practical-Machine-Learning")
train <- read.csv("pml-training.csv", na.strings = c("NA", "", "#DIV/0!"))
train <- train[, colSums(is.na(train)) < .5 * nrow(train)]
inTrain2 <- createDataPartition (y=train$classe, p=.05, list=FALSE)
train2<-train[inTrain2,]
test2<-train[-inTrain2,]
mGbm <-train(classe~., data=train2, method="gbm", verbose=FALSE)
confusionMatrix(predict(mGbm,test2), test2$classe)
test <- read.csv("pml-testing.csv", na.strings = c("NA", "", "#DIV/0!"))
p <- predict(mGbm,test)
p
head (train2, 1)
summary (train2$classe)
predict(mGbm$inalModel,test)
predict(mGbm$finalModel,test)
predict(mGbm,test)
predict(mTree,test)
